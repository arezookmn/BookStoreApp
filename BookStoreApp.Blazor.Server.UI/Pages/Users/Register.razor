@page "/users/register"
@inject IClient httpClient
@inject NavigationManager navManager
<h3>Register</h3>
@if (string.IsNullOrEmpty(messages) == false)
{
    <div class="alert alert-danger">
        <p>@messages</p>
    </div>
}
<div class="card-body">
    <EditForm Model="registrationModel" OnValidSubmit="@HandleRegisteration">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            <label for="email">Email</label>
            <InputText class="form-control" id="email" @bind-Value="registrationModel.Email"/>
            <ValidationMessage For="@(() => registrationModel.Email)"/>
        </div>
        <div class="form-group">
            <label for="firstName">First Name</label>
            <InputText class="form-control" id="firstName" @bind-Value="registrationModel.FirstName"/>
            <ValidationMessage For="@(() => registrationModel.FirstName)"/>
        </div>

        <div class="form-group">
            <label for="lastName">Last Name</label>
            <InputText class="form-control" id="lastName" @bind-Value="registrationModel.LastName"/>
            <ValidationMessage For="@(() => registrationModel.LastName)"/>
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText class="form-control" id="password" type="password" @bind-Value="registrationModel.Password"/>
            <ValidationMessage For="@(() => registrationModel.Password)"/>
        </div>
        <button type="submit" class="btn btn-primary">Register</button>
    </EditForm>
</div>
@code {
    UserRegisterDTO registrationModel = new UserRegisterDTO(){
        Role = "User"
    };

    string messages = String.Empty;
    private async Task HandleRegisteration()
    {
        try
        {
            await httpClient.RegisterAsync(registrationModel);
            navManager.NavigateTo("/users/login");
        }
        catch (ApiException ex)
        {
            messages = ex.Message;
        }

    }

}
