@page "/books/"
@inject IBookService BookService
@inject IJSRuntime JsRuntime
<h3>Index</h3>
@if (response.Success)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
@if (Model == null)
{
    <div class="alert alert-info">
        <h4>Loading...</h4>
    </div>
}
else
{
@*     <AuthorizeView Roles="Admin">
 *@        <a class="btn btn-primary" href="/books/create"><span class="oi oi-plus"></span>Create Book</a>
@*     </AuthorizeView>
 *@
    <table class="table table-responsive">
        <thead>
            <tr>
                <th></th>
                <th>Title</th>
                <th>Price</th>
                <th>Author Name</th>
                <th>Action</th>

            </tr>
        </thead>

        <tbody>
            @foreach (var book in Model)
            {
                <tr>
                    <td>
                        <img src="@book.Image" alt="@book.Title" width="100" height="100"/>
                    </td>
                    <td>@book.Title</td>
                    <td>@book.Price</td>
                    <td>@book.AuthorName</td>

                    <td>
                        <a class="btn btn-primary" href="/books/details/@book.Id"><span class="oi oi-book" aria-hidden="true"></span>Details</a>

                        <AuthorizeView Roles="Admin">
                            <a class="btn btn-warning" href="/books/update/@book.Id"><span class="oi oi-pencil" aria-hidden="true"></span>Edit</a>
                            <button @onclick="@(() => Delete(@book.Id))" class="btn btn-danger"><span class="oi oi-delete" aria-hidden="true"></span>Delete</button>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}

@code {

    private List<BookResponseDTO> Model;
    private Response<List<BookResponseDTO>> response = new Response<List<BookResponseDTO>>() { Success = true };
    protected override async Task OnInitializedAsync()
    {
        response = await BookService.GetBooks();
        if (response.Success)
        {
            Model = response.Data;
        }
    }

    private async Task Delete(int bookId)
    {
        var book = Model.First(a => a.Id == bookId);
        var confirm = await JsRuntime.InvokeAsync<bool>("confirm", $"are you sure to delete this item {book.Title}");
        if (confirm)
        {
            var response = await BookService.DeleteBook(bookId);
            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }

    }
}

