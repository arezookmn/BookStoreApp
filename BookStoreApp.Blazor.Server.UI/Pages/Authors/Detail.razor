@page "/authors/details/{id:int}"
@inject IAuthorService AuthorService
@inject NavigationManager NavigationManager
<h3>Author Detail</h3>


<EditForm Model="Model" >
    
    <fieldset disabled="true">
        <div class="form-group">
            <label for="firstName">First Name</label>
            <InputText class="form-control" id="firstName" @bind-Value="Model.FirstName" />
            <ValidationMessage For="@(() => Model.FirstName)" />
        </div>

        <div class="form-group">
            <label for="lastName">Last Name</label>
            <InputText class="form-control" id="lastName" @bind-Value="Model.LastName" />
            <ValidationMessage For="@(() => Model.LastName)" />
        </div>

        <div class="form-group">
            <label for="bio">Biography</label>
            <InputText class="form-control" id="bio" @bind-Value="Model.Bio" />
            <ValidationMessage For="@(() => Model.Bio)" />
        </div>
    </fieldset>
    
    
    @if (Model.Books == null || Model.Books.Any() == false)
    {
        <div class="alert alert-dismissible alert-secondary">
            No books for this author
        </div>
    }
    else
    {
        foreach (var book in Model.Books)
        {
            <div class="card" style="width: 18rem">
                <img src="@book.Image" class="card-img-top"/>
                <div class="card-body">
                    <h5 class="card-title">@book.Title - @book.Price</h5>
                    <p class="card-text">@book.Summery</p>
                    <a href="#" class="btn btn-primary">View Book</a>
                </div>
            </div>
        }
    }

    <button class="btn btn-outline-secondary" @onclick="GoToEdit">Edit Author</button>
    <button class="btn btn-outline-secondary" @onclick="BackToList">Back to list</button>
</EditForm>

@code {

    [Parameter]
    public int id { get; set; }

    private AuthorDetailsDTO Model = new AuthorDetailsDTO();

    protected override async Task OnInitializedAsync()
    {
        var response = await AuthorService.GetAuthorById(id);
        if (response.Success)
        {
            Model = response.Data;
        }
    }
    private void GoToEdit()
    {
        NavigationManager.NavigateTo($"/authors/update/{Model.Id}");
    }
    private void BackToList()
    {
        NavigationManager.NavigateTo("/authors/");
    }
}
